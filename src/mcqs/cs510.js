export const cs510 = [
    {
      id: 1,
      text: 'What is the primary goal of use case modeling?',
      options: [
        'To create a visual representation of code',
        'To identify and document system requirements',
        'To estimate project costs',
        'To design user interfaces',
      ],
      correct: 2,
    },
    {
      id: 2,
      text: 'Which of the following is an actor in the Air Ticket Reservation System?',
      options: [
        'Flight',
        'Admin',
        'Reservation',
        'Ticket',
      ],
      correct: 2,
    },
    {
      id: 3,
      text: 'What is the precondition for the "SearchSeat" use case?',
      options: [
        'Flight must be canceled',
        'Admin must be logged in',
        'Flights must exist in the database',
        'User must print schedule',
      ],
      correct: 3,
    },
    {
      id: 4,
      text: 'Which action is NOT part of the "SearchSeat" use case?',
      options: [
        'Enter the date(s)',
        'Click "display" button',
        'Double-click flight to view seats',
        'Cancel the flight',
      ],
      correct: 4,
    },
    {
      id: 5,
      text: 'What does the system display when the "Search Flight" link is selected?',
      options: [
        'Flight schedule input screen',
        'Ticket prices',
        'Admin dashboard',
        'Reservation history',
      ],
      correct: 1,
    },
    {
      id: 6,
      text: 'Which use case allows an admin to create new flight entries?',
      options: [
        'CancelReservation',
        'AddFlight',
        'SearchSeat',
        'ReserveSeat',
      ],
      correct: 2,
    },
    {
      id: 7,
      text: 'What happens if the admin cancels the "Add Flight" process at the input stage?',
      options: [
        'Flight is saved automatically',
        'System returns to the home page',
        'The flight is deleted',
        'System displays error message',
      ],
      correct: 2,
    },
    {
      id: 8,
      text: 'Which of the following use cases involves notifying passengers via email?',
      options: [
        'ReserveSeat',
        'CancelFlight',
        'SendEmail',
        'SearchSeat',
      ],
      correct: 3,
    },
    {
      id: 9,
      text: 'What is the post-condition of the "Add Flight" use case?',
      options: [
        'Flight schedule is displayed',
        'Flight is entered into the system',
        'Passenger receives email',
        'Ticket is issued',
      ],
      correct: 2,
    },
    {
      id: 10,
      text: 'Which of the following extends the "SearchSeat" use case?',
      options: [
        'SearchFlight',
        'AddFlight',
        'CancelReservation',
        'SendEmail',
      ],
      correct: 1,
    },
    {
      id: 11,
      text: 'What is the priority of the "SearchSeat" use case?',
      options: [
        'High',
        'Low',
        'Normal',
        'Critical',
      ],
      correct: 3,
    },
    {
      id: 12,
      text: 'Which actor is responsible for canceling a flight in the system?',
      options: [
        'Passenger',
        'Admin',
        'Booking Staff',
        'Client Terminal',
      ],
      correct: 2,
    },
    {
      id: 13,
      text: 'Which of the following use cases allows users to print seat details?',
      options: [
        'ReserveSeat',
        'PrintSchedule',
        'CancelReservation',
        'AddFlight',
      ],
      correct: 2,
    },
    {
      id: 14,
      text: 'What is the trigger for transitioning from the "SearchSeat" state to the "PrintSchedule" state?',
      options: [
        'Selecting seat(s)',
        'Clicking the "print" button',
        'Flight confirmation',
        'Sending an email',
      ],
      correct: 2,
    },
    {
      id: 15,
      text: 'Which use case involves modifying an existing reservation?',
      options: [
        'AddFlight',
        'CancelReservation',
        'EditReservation',
        'ViewNewsFlash',
      ],
      correct: 3,
    },
    {
      id: 16,
      text: 'Which of the following is NOT a primary actor in the Air Ticket Reservation System?',
      options: [
        'Passenger',
        'Admin',
        'Booking Staff',
        'Flight',
      ],
      correct: 4,
    },
    {
      id: 17,
      text: 'What condition results in the system displaying "Information Not Available at the Time"?',
      options: [
        'Flight is overbooked',
        'Server is disconnected',
        'User clicks cancel button',
        'User selects incorrect date',
      ],
      correct: 2,
    },
    {
      id: 18,
      text: 'Which step is the first action in the "Add Flight" use case?',
      options: [
        'Submit flight data',
        'Click "Add Flight" link',
        'Log into admin panel',
        'Search available flights',
      ],
      correct: 3,
    },
    {
      id: 19,
      text: 'What happens if the passenger does not select a seat in the "SearchSeat" use case?',
      options: [
        'System cancels reservation',
        'System goes back to the home page',
        'System displays error message',
        'System confirms the booking',
      ],
      correct: 2,
    },
    {
      id: 20,
      text: 'What is the outcome when a passenger double-clicks a flight after searching for seats?',
      options: [
        'Flight is canceled',
        'System displays available seats',
        'Passenger is redirected to home page',
        'System logs out the user',
      ],
      correct: 2,
    },
    {
      id: 21,
      text: 'What is the purpose of state machine modeling?',
      options: [
        'To represent system actors',
        'To track the progress of coding tasks',
        'To model the states and transitions of an object',
        'To describe system requirements',
      ],
      correct: 3,
    },
    {
      id: 22,
      text: 'In state machine modeling, what represents the initial state?',
      options: [
        'A circle with a dot inside',
        'A filled black circle',
        'A rectangle with rounded corners',
        'An arrow with a label',
      ],
      correct: 2,
    },
    {
      id: 23,
      text: 'Which element in state machine modeling causes a transition between states?',
      options: [
        'Event',
        'Object',
        'Agent',
        'Node',
      ],
      correct: 1,
    },
    {
      id: 24,
      text: 'What symbol represents the final state in a state machine diagram?',
      options: [
        'A circle with a dot inside',
        'A diamond',
        'A black square',
        'A triangle',
      ],
      correct: 1,
    },
    {
      id: 25,
      text: 'Which of the following is an example of a trigger in state machine modeling?',
      options: [
        'System crash',
        'Change in condition',
        'Flight schedule update',
        'Adding a new user',
      ],
      correct: 2,
    },
    {
      id: 26,
      text: 'What does a transition arrow represent in a state diagram?',
      options: [
        'A change in object properties',
        'A shift from one state to another',
        'An event log',
        'A loop within the same state',
      ],
      correct: 2,
    },
    {
      id: 27,
      text: 'Which component of a state machine diagram holds the name of the state?',
      options: [
        'A circle with an arrow',
        'A rectangle with rounded corners',
        'A triangle pointing to the next state',
        'A black square',
      ],
      correct: 2,
    },
    {
      id: 28,
      text: 'What happens when the system reaches the final state in a state machine?',
      options: [
        'The system resets',
        'The process terminates',
        'The user is notified',
        'The system returns to the initial state',
      ],
      correct: 2,
    },
    {
      id: 29,
      text: 'In state machine modeling, what is the purpose of the "do" activity inside a state?',
      options: [
        'To describe the event causing the transition',
        'To represent the state name',
        'To define an activity performed during the state',
        'To identify the agent responsible for the state',
      ],
      correct: 3,
    },
    {
      id: 30,
      text: 'Which of the following is a key advantage of using state machines?',
      options: [
        'Reduced system memory usage',
        'Simplified and structured representation of state changes',
        'Increased complexity of the system',
        'Greater focus on cost reduction',
      ],
      correct: 2,
    },
    {
      id: 31,
      text: 'What term describes the series of possible states for an object?',
      options: [
        'System cycle',
        'State transition',
        'State sequence',
        'State path',
      ],
      correct: 3,
    },
    {
      id: 32,
      text: 'Which of the following causes a transition to occur in a state machine?',
      options: [
        'Lack of input',
        'Time passage',
        'State inaction',
        'User absence',
      ],
      correct: 2,
    },
    {
      id: 33,
      text: 'What type of relationship connects events and objects in state machine modeling?',
      options: [
        'Hierarchical',
        'Sequential',
        'Associative',
        'Event-driven',
      ],
      correct: 4,
    },
    {
      id: 34,
      text: 'How are complex systems represented concisely in state machine modeling?',
      options: [
        'Through object inheritance',
        'By using nested state diagrams',
        'With increased system components',
        'Through code annotations',
      ],
      correct: 2,
    },
    {
      id: 35,
      text: 'Which of the following best defines "aggregation" in state machine modeling?',
      options: [
        'Merging two states into one',
        'Combination of sub-object states',
        'Splitting one state into multiple paths',
        'Deleting unnecessary states',
      ],
      correct: 2,
    },
    {
      id: 36,
      text: 'In a car state machine, what does "Ignition: ON" represent?',
      options: [
        'A transition',
        'A state',
        'An event',
        'A trigger',
      ],
      correct: 2,
    },
    {
      id: 37,
      text: 'Which state represents the system being idle?',
      options: [
        'Off-hook',
        'Printing',
        'On-hook',
        'Connected',
      ],
      correct: 3,
    },
    {
      id: 38,
      text: 'What is the result of the "PrintReceived" event in a printer state machine?',
      options: [
        'The printer enters the idle state',
        'The printer starts printing each page',
        'The printer shuts down',
        'The printer clears the queue',
      ],
      correct: 2,
    },
    {
      id: 39,
      text: 'Which condition might prevent state transitions in a state machine?',
      options: [
        'Lack of trigger event',
        'Presence of multiple states',
        'Complex system design',
        'Duplicate events',
      ],
      correct: 1,
    },
    {
      id: 40,
      text: 'What is the function of nested state diagrams?',
      options: [
        'To remove redundant states',
        'To provide detailed descriptions of sub-activities',
        'To delete unnecessary transitions',
        'To simplify state machines by reducing paths',
      ],
      correct: 2,
    },
    {
      id: 41,
      text: 'What does GORE stand for in requirements engineering?',
      options: [
        'General Object Requirements Engineering',
        'Goal-Oriented Requirements Engineering',
        'Graphical Object Requirements Engineering',
        'Goal-Oriented Resource Evaluation',
      ],
      correct: 2,
    },
    {
      id: 42,
      text: 'Which of the following is a primary focus of Goal-Oriented Requirements Engineering (GORE)?',
      options: [
        'Focusing on code efficiency',
        'Modeling stakeholder goals and objectives',
        'Designing user interfaces',
        'Minimizing project cost',
      ],
      correct: 2,
    },
    {
      id: 43,
      text: 'Which of the following best describes a goal in GORE?',
      options: [
        'A specific task to be performed by developers',
        'An objective the system should achieve',
        'A list of coding requirements',
        'A resource allocated to the project',
      ],
      correct: 2,
    },
    {
      id: 44,
      text: 'What type of goals are non-functional and lack clear-cut satisfaction criteria?',
      options: [
        'Softgoals',
        'Hardgoals',
        'Primary goals',
        'Subgoals',
      ],
      correct: 1,
    },
    {
      id: 45,
      text: 'In GORE, what type of goal ensures security, availability, and reliability of the system?',
      options: [
        'Operational goal',
        'Performance goal',
        'Non-functional goal',
        'Resource goal',
      ],
      correct: 3,
    },
    {
      id: 46,
      text: 'Which of the following is an example of a functional goal?',
      options: [
        'System must be easy to use',
        'System should respond within 2 seconds',
        'System must allow users to reset passwords',
        'System data must be encrypted',
      ],
      correct: 3,
    },
    {
      id: 47,
      text: 'Which technique is used to graphically represent softgoals and their interdependencies?',
      options: [
        'Entity-Relationship Diagram',
        'Softgoal Interdependency Graph (SIG)',
        'Flowchart',
        'Use Case Diagram',
      ],
      correct: 2,
    },
    {
      id: 48,
      text: 'What type of refinement is used to decompose goals into sub-goals in GORE?',
      options: [
        'AND/OR Refinement',
        'Event Refinement',
        'Class Refinement',
        'User Refinement',
      ],
      correct: 1,
    },
    {
      id: 49,
      text: 'What is a claim softgoal used for in the NFR framework?',
      options: [
        'To define system architecture',
        'To validate stakeholder requests',
        'To record design rationale and decisions',
        'To add new functional requirements',
      ],
      correct: 3,
    },
    {
      id: 50,
      text: 'Which of the following is NOT a reason for using GORE?',
      options: [
        'Requirement completeness',
        'Exploration of design choices',
        'Minimizing code lines',
        'Traceability of requirements',
      ],
      correct: 3,
    },
    {
      id: 51,
      text: 'In goal modeling, what does an operationalization link represent?',
      options: [
        'A relationship between functional and non-functional goals',
        'A connection between sub-goals and stakeholders',
        'A mapping between goals and operations',
        'A transition between states in a state machine',
      ],
      correct: 3,
    },
    {
      id: 52,
      text: 'Which of the following best defines a high-level goal?',
      options: [
        'A goal achieved after system deployment',
        'A broad and abstract goal reflecting the overall objective',
        'A detailed and specific goal',
        'A goal tied to the database structure',
      ],
      correct: 2,
    },
    {
      id: 53,
      text: 'Which process in GORE helps ensure alignment between goals and system behavior?',
      options: [
        'Goal validation',
        'Goal decomposition',
        'Goal prioritization',
        'Goal automation',
      ],
      correct: 2,
    },
    {
      id: 54,
      text: 'What happens when goal refinement reaches the leaf level?',
      options: [
        'The project is completed',
        'All subgoals are fulfilled',
        'Goals are assigned to specific agents or systems',
        'New high-level goals are created',
      ],
      correct: 3,
    },
    {
      id: 55,
      text: 'Which diagram is commonly used to visualize goal refinements in GORE?',
      options: [
        'State Machine Diagram',
        'Class Diagram',
        'Use Case Diagram',
        'Goal Model Diagram',
      ],
      correct: 4,
    },
    {
      id: 56,
      text: 'What is the purpose of milestone-driven refinement in goal modeling?',
      options: [
        'To evaluate stakeholder satisfaction',
        'To identify future subgoals',
        'To guide goal completeness and progress',
        'To increase software speed',
      ],
      correct: 3,
    },
    {
      id: 57,
      text: 'Which of the following is an example of a non-functional goal?',
      options: [
        'Allow users to create accounts',
        'Enable ticket booking',
        'Ensure the system is available 24/7',
        'Allow password changes',
      ],
      correct: 3,
    },
    {
      id: 58,
      text: 'What distinguishes a goal from a requirement in GORE?',
      options: [
        'Goals are specific tasks, while requirements are broad objectives',
        'Goals are abstract and stable, while requirements are concrete and changeable',
        'Requirements are less important than goals',
        'Requirements cannot be traced back to goals',
      ],
      correct: 2,
    },
    {
      id: 59,
      text: 'Which factor can lead to goal conflicts during goal modeling?',
      options: [
        'Insufficient project funding',
        'Contradicting stakeholder interests',
        'Lack of team members',
        'Short project timelines',
      ],
      correct: 2,
    },
    {
      id: 60,
      text: 'What is the final outcome of the goal-oriented requirements engineering process?',
      options: [
        'Codebase documentation',
        'System design models',
        'Operationalized goals and requirements',
        'User interface prototypes',
      ],
      correct: 3,
    },
  {
    id: 61,
    text: 'What is the primary purpose of the NFR (Non-Functional Requirement) framework?',
    options: [
      'To model user interactions',
      'To address system performance and quality attributes',
      'To define database relationships',
      'To track project costs',
    ],
    correct: 2,
  },
  {
    id: 62,
    text: 'Which of the following best defines a softgoal in the NFR framework?',
    options: [
      'A goal that focuses on measurable outcomes',
      'A goal with clear and precise satisfaction criteria',
      'A goal that lacks clear-cut satisfaction criteria and may be partially satisfied',
      'A goal that represents only functional requirements',
    ],
    correct: 3,
  },
  {
    id: 63,
    text: 'What is the key modeling tool used in the NFR framework?',
    options: [
      'Flowchart',
      'Class Diagram',
      'Softgoal Interdependency Graph (SIG)',
      'State Machine Diagram',
    ],
    correct: 3,
  },
  {
    id: 64,
    text: 'In the NFR framework, what does an operationalizing softgoal represent?',
    options: [
      'A goal for system design alternatives',
      'A goal that captures user needs',
      'A goal that defines the overall project scope',
      'A goal to track stakeholder feedback',
    ],
    correct: 1,
  },
  {
    id: 65,
    text: 'Which activity involves breaking down non-functional requirements into smaller sub-goals?',
    options: [
      'Goal refinement',
      'Operationalization',
      'Decomposition',
      'Validation',
    ],
    correct: 3,
  },
  {
    id: 66,
    text: 'Which of the following contributes positively to a softgoal in the NFR framework?',
    options: [
      'A goal with negative impact',
      'A conflicting requirement',
      'A design choice that enhances goal satisfaction',
      'An incomplete requirement',
    ],
    correct: 3,
  },
  {
    id: 67,
    text: 'What is the result of conflicting softgoals in the NFR framework?',
    options: [
      'System failure',
      'Trade-offs and prioritization',
      'Complete goal satisfaction',
      'Requirement cancellation',
    ],
    correct: 2,
  },
  {
    id: 68,
    text: 'Which symbol represents positive contributions in a Softgoal Interdependency Graph (SIG)?',
    options: [
      '++',
      '--',
      '-',
      '+',
    ],
    correct: 4,
  },
  {
    id: 69,
    text: 'In the NFR framework, which term describes capturing ambiguities and trade-offs?',
    options: [
      'Goal operationalization',
      'Softgoal decomposition',
      'Handling interdependencies',
      'Stakeholder collaboration',
    ],
    correct: 3,
  },
  {
    id: 70,
    text: 'Which type of goal in the NFR framework is concerned with performance, security, and usability?',
    options: [
      'Functional goal',
      'Softgoal',
      'Operational goal',
      'Design goal',
    ],
    correct: 2,
  },
  {
    id: 71,
    text: 'What does the term "satisficing" mean in the context of the NFR framework?',
    options: [
      'Fully achieving a goal',
      'Partially satisfying a goal',
      'Rejecting unnecessary goals',
      'Optimizing system performance',
    ],
    correct: 2,
  },
  {
    id: 72,
    text: 'What kind of graph is used to represent dependencies between non-functional goals?',
    options: [
      'Softgoal Interdependency Graph (SIG)',
      'State Transition Graph',
      'Sequence Diagram',
      'Entity-Relationship Diagram',
    ],
    correct: 1,
  },
  {
    id: 73,
    text: 'Which of the following is NOT a type of softgoal in the NFR framework?',
    options: [
      'NFR softgoal',
      'Operationalizing softgoal',
      'Claim softgoal',
      'Critical softgoal',
    ],
    correct: 4,
  },
  {
    id: 74,
    text: 'What is the primary role of claim softgoals in the NFR framework?',
    options: [
      'To provide high-level project goals',
      'To define technical specifications',
      'To document design rationale and justify decisions',
      'To replace non-functional requirements',
    ],
    correct: 3,
  },
  {
    id: 75,
    text: 'Which of the following can negatively impact a softgoal in the NFR framework?',
    options: [
      'A conflicting design choice',
      'A stakeholder agreement',
      'A complete operationalization',
      'A goal that enhances system usability',
    ],
    correct: 1,
  },
  {
    id: 76,
    text: 'Which term describes the refinement of softgoals into more specific sub-goals?',
    options: [
      'Operationalization',
      'Decomposition',
      'Classification',
      'Evaluation',
    ],
    correct: 2,
  },
  {
    id: 77,
    text: 'What does a "-" symbol indicate in a Softgoal Interdependency Graph (SIG)?',
    options: [
      'A neutral contribution',
      'A negative contribution',
      'A claim softgoal',
      'An incomplete softgoal',
    ],
    correct: 2,
  },
  {
    id: 78,
    text: 'In the NFR framework, what activity involves selecting design alternatives for NFR goals?',
    options: [
      'Goal specification',
      'Operationalization',
      'Refinement',
      'Requirement tracing',
    ],
    correct: 2,
  },
  {
    id: 79,
    text: 'Which of the following best describes the goal of the NFR framework?',
    options: [
      'To generate new user requirements',
      'To model non-functional requirements and manage trade-offs',
      'To reduce system development time',
      'To replace use case diagrams',
    ],
    correct: 2,
  },
  {
    id: 80,
    text: 'What happens when a design choice fails to operationalize an NFR softgoal?',
    options: [
      'The goal is discarded',
      'The system is redesigned',
      'The goal remains partially satisfied',
      'Stakeholders are removed from the project',
    ],
    correct: 3,
  },
  {
    id: 81,
    text: 'What does KAOS stand for in requirements engineering?',
    options: [
      'Knowledge Acquisition in Automated Systems',
      'Knowledge Acquisition in Automated Specification',
      'Key Analysis of System Operations',
      'Knowledge and System Optimization Strategy',
    ],
    correct: 2,
  },
  {
    id: 82,
    text: 'Which of the following is a primary goal of KAOS?',
    options: [
      'To automate system testing',
      'To develop use case diagrams',
      'To derive requirements from goals',
      'To write system documentation',
    ],
    correct: 3,
  },
  {
    id: 83,
    text: 'In KAOS, what is an agent?',
    options: [
      'A passive system component',
      'An active object that performs operations',
      'A goal refinement tool',
      'A graphical representation of data',
    ],
    correct: 2,
  },
  {
    id: 84,
    text: 'Which of the following best defines a goal in KAOS?',
    options: [
      'A test case for system validation',
      'An objective to be achieved by the system',
      'A software module to be coded',
      'A database schema',
    ],
    correct: 2,
  },
  {
    id: 85,
    text: 'What does the KAOS object model primarily represent?',
    options: [
      'Software requirements',
      'System states and transitions',
      'Concepts and entities of the application domain',
      'User interface components',
    ],
    correct: 3,
  },
  {
    id: 86,
    text: 'Which model in KAOS describes agent behaviors and operations?',
    options: [
      'Goal model',
      'Operation model',
      'Object model',
      'Responsibility model',
    ],
    correct: 2,
  },
  {
    id: 87,
    text: 'Which component of KAOS is responsible for assigning goals to agents?',
    options: [
      'Goal model',
      'Object model',
      'Responsibility model',
      'Class model',
    ],
    correct: 3,
  },
  {
    id: 88,
    text: 'What happens when goal refinement reaches its lowest level in KAOS?',
    options: [
      'Goals are mapped to specific agents or system operations',
      'Goals are discarded',
      'New higher-level goals are generated',
      'Goals are replaced by non-functional requirements',
    ],
    correct: 1,
  },
  {
    id: 89,
    text: 'In KAOS, what is the purpose of the operation model?',
    options: [
      'To define use cases',
      'To describe system states',
      'To specify operations performed by agents',
      'To map database entities',
    ],
    correct: 3,
  },
  {
    id: 90,
    text: 'What does the responsibility model in KAOS define?',
    options: [
      'System architecture',
      'Operational workflows',
      'The roles and obligations of agents in achieving goals',
      'The user interface layout',
    ],
    correct: 3,
  },
  {
    id: 91,
    text: 'Which of the following is an example of a KAOS goal refinement method?',
    options: [
      'AND/OR refinement',
      'State machine transitions',
      'Class inheritance',
      'Sequence modeling',
    ],
    correct: 1,
  },
  {
    id: 92,
    text: 'What triggers state transitions in the KAOS operation model?',
    options: [
      'Events and agent operations',
      'Database queries',
      'System crashes',
      'User interface changes',
    ],
    correct: 1,
  },
  {
    id: 93,
    text: 'Which of the following is a key feature of KAOS?',
    options: [
      'Focus on operational constraints only',
      'Exclusive modeling of software interfaces',
      'Integration of goals, agents, and operations',
      'Automated code generation',
    ],
    correct: 3,
  },
  {
    id: 94,
    text: 'In KAOS, what is the relationship between goals and requirements?',
    options: [
      'Goals represent abstract objectives, and requirements specify how to achieve them',
      'Goals and requirements are interchangeable',
      'Requirements are more abstract than goals',
      'Goals only apply to functional aspects of the system',
    ],
    correct: 1,
  },
  {
    id: 95,
    text: 'Which of the following best represents an object in the KAOS object model?',
    options: [
      'A state transition',
      'An entity, relationship, or event',
      'A programming function',
      'A user interface component',
    ],
    correct: 2,
  },
  {
    id: 96,
    text: 'What is a key advantage of using KAOS in requirements engineering?',
    options: [
      'It eliminates the need for stakeholder interviews',
      'It provides a structured way to link goals to operations and responsibilities',
      'It focuses only on non-functional requirements',
      'It simplifies database schema design',
    ],
    correct: 2,
  },
  {
    id: 97,
    text: 'In KAOS, what happens when a goal is operationalized?',
    options: [
      'It is transformed into a use case',
      'It is assigned to an agent for implementation',
      'It is deleted from the system',
      'It is stored in the object model',
    ],
    correct: 2,
  },
  {
    id: 98,
    text: 'Which of the following types of goals can refer to services or quality attributes in KAOS?',
    options: [
      'Softgoals',
      'Operational goals',
      'Functional and non-functional goals',
      'Design goals',
    ],
    correct: 3,
  },
  {
    id: 99,
    text: 'What does the term "refinement" mean in the context of KAOS goal modeling?',
    options: [
      'Breaking down high-level goals into more detailed sub-goals',
      'Deleting unnecessary goals',
      'Combining multiple goals into one',
      'Creating new database tables',
    ],
    correct: 1,
  },
  {
    id: 100,
    text: 'Which diagram is essential for visualizing goal decomposition in KAOS?',
    options: [
      'Class Diagram',
      'Use Case Diagram',
      'Goal Model Diagram',
      'Activity Diagram',
    ],
    correct: 3,
  },
  {
    id: 101,
    text: 'What is the primary focus of requirements change management?',
    options: [
      'To finalize requirements before development',
      'To handle changes systematically during development',
      'To eliminate unnecessary requirements',
      'To reduce project timelines',
    ],
    correct: 2,
  },
  {
    id: 102,
    text: 'In agile development, how are requirements changes typically handled?',
    options: [
      'Changes are frozen after the initial phase',
      'Changes are discouraged during development',
      'Changes are welcomed at the start of each iteration',
      'Changes are only allowed after deployment',
    ],
    correct: 3,
  },
  {
    id: 103,
    text: 'Which key stakeholder is responsible for prioritizing requirements in agile development?',
    options: [
      'Project Manager',
      'Development Team',
      'Customer or Product Owner',
      'Quality Assurance Team',
    ],
    correct: 3,
  },
  {
    id: 104,
    text: 'What is the main reason for requirements changes during a project?',
    options: [
      'System crashes',
      'Evolving customer needs and market conditions',
      'Lack of developer skills',
      'Hardware limitations',
    ],
    correct: 2,
  },
  {
    id: 105,
    text: 'Which agile practice ensures continuous feedback and adapts to changing requirements?',
    options: [
      'Daily stand-up meetings',
      'Code refactoring',
      'Sprint reviews and retrospectives',
      'Test automation',
    ],
    correct: 3,
  },
  {
    id: 106,
    text: 'What does the backlog represent in agile development?',
    options: [
      'A list of team issues',
      'A list of completed tasks',
      'A prioritized list of requirements and tasks',
      'A record of project failures',
    ],
    correct: 3,
  },
  {
    id: 107,
    text: 'Which phase of the agile process typically addresses changing requirements?',
    options: [
      'Testing phase',
      'Sprint planning',
      'Deployment phase',
      'Requirements gathering phase',
    ],
    correct: 2,
  },
  {
    id: 108,
    text: 'In agile development, what term describes adjusting the backlog based on changing needs?',
    options: [
      'Backlog refinement',
      'Sprint initiation',
      'Code review',
      'System testing',
    ],
    correct: 1,
  },
  {
    id: 109,
    text: 'Which document is most important for tracking requirements changes?',
    options: [
      'Change request form',
      'System architecture diagram',
      'Test case document',
      'User manual',
    ],
    correct: 1,
  },
  {
    id: 110,
    text: 'What is a major risk of failing to manage requirements changes properly?',
    options: [
      'Increased project success rate',
      'Stakeholder satisfaction',
      'Scope creep and project delays',
      'Improved team collaboration',
    ],
    correct: 3,
  },
  {
    id: 111,
    text: 'What is the goal of requirements traceability in change management?',
    options: [
      'To connect requirements to design, implementation, and testing',
      'To reduce project costs',
      'To minimize coding errors',
      'To accelerate deployment timelines',
    ],
    correct: 1,
  },
  {
    id: 112,
    text: 'How does agile development minimize the impact of changing requirements?',
    options: [
      'By limiting user involvement',
      'By conducting short development iterations',
      'By fixing requirements at the beginning',
      'By avoiding documentation',
    ],
    correct: 2,
  },
  {
    id: 113,
    text: 'Which of the following helps in identifying the impact of a requirements change?',
    options: [
      'System deployment',
      'Impact analysis',
      'Code refactoring',
      'User training',
    ],
    correct: 2,
  },
  {
    id: 114,
    text: 'What role does a sprint backlog play in managing requirements changes?',
    options: [
      'It stores completed tasks',
      'It tracks user issues',
      'It reflects current sprint priorities and tasks',
      'It holds rejected requirements',
    ],
    correct: 3,
  },
  {
    id: 115,
    text: 'In agile, how often can the backlog be reprioritized?',
    options: [
      'After product deployment',
      'At the end of the project',
      'Anytime during the project',
      'Only during sprint planning',
    ],
    correct: 3,
  },
  {
    id: 116,
    text: 'Which agile method focuses on delivering small releases frequently to adapt to changing requirements?',
    options: [
      'Extreme Programming (XP)',
      'Waterfall Model',
      'V-Model',
      'Prototype Model',
    ],
    correct: 1,
  },
  {
    id: 117,
    text: 'What is the result of frequent communication with stakeholders during development?',
    options: [
      'Increased likelihood of requirements misalignment',
      'Reduced stakeholder involvement',
      'Early identification of changing requirements',
      'Delayed project delivery',
    ],
    correct: 3,
  },
  {
    id: 118,
    text: 'Which agile tool helps visualize requirements and track progress?',
    options: [
      'Kanban board',
      'User manual',
      'Test case document',
      'System architecture diagram',
    ],
    correct: 1,
  },
  {
    id: 119,
    text: 'Which metric is used to measure how well requirements are met during development?',
    options: [
      'Code complexity',
      'Requirement coverage',
      'System uptime',
      'Bug count',
    ],
    correct: 2,
  },
  {
    id: 120,
    text: 'What is a key benefit of requirements change management in agile projects?',
    options: [
      'Reduced testing phases',
      'Enhanced flexibility and adaptability',
      'Fixed project timelines',
      'Decreased customer collaboration',
    ],
    correct: 2,
  },
  {
    id: 121,
    text: 'What is the primary purpose of traceability in requirements engineering?',
    options: [
      'To link requirements to project budgets',
      'To ensure every requirement can be tracked to its source',
      'To design the system architecture',
      'To reduce the development timeline',
    ],
    correct: 2,
  },
  {
    id: 122,
    text: 'Which of the following best defines forward traceability?',
    options: [
      'Tracing requirements back to stakeholders',
      'Tracing design and implementation back to requirements',
      'Tracing requirements to design and implementation',
      'Tracing system failures to user feedback',
    ],
    correct: 3,
  },
  {
    id: 123,
    text: 'What does backward traceability ensure in requirements engineering?',
    options: [
      'That requirements are derived from design decisions',
      'That design decisions can be traced back to original requirements',
      'That the project is delivered on time',
      'That system testing occurs in the initial phase',
    ],
    correct: 2,
  },
  {
    id: 124,
    text: 'Which tool is commonly used to manage and track requirements traceability?',
    options: [
      'Microsoft Excel',
      'Traceability Matrix',
      'System Logs',
      'User Interface Diagrams',
    ],
    correct: 2,
  },
  {
    id: 125,
    text: 'What is the purpose of a traceability matrix?',
    options: [
      'To track project expenses',
      'To correlate requirements to design, tests, and implementation',
      'To measure code quality',
      'To document user manuals',
    ],
    correct: 2,
  },
  {
    id: 126,
    text: 'Which type of traceability links design and implementation components back to requirements?',
    options: [
      'Forward-to traceability',
      'Backward-from traceability',
      'Forward-from traceability',
      'Backward-to traceability',
    ],
    correct: 4,
  },
  {
    id: 127,
    text: 'What is a key benefit of implementing requirements traceability?',
    options: [
      'Faster software deployment',
      'Reduction in project cost',
      'Enhanced ability to manage changes and verify requirements',
      'Elimination of the testing phase',
    ],
    correct: 3,
  },
  {
    id: 128,
    text: 'Which of the following is an example of requirements-sources traceability?',
    options: [
      'Linking requirements to design documents',
      'Linking requirements to their original stakeholders',
      'Tracing requirements to code files',
      'Tracing test cases to requirements',
    ],
    correct: 2,
  },
  {
    id: 129,
    text: 'Which traceability type connects requirements with the reasons they were specified?',
    options: [
      'Requirements-design traceability',
      'Requirements-rationale traceability',
      'Requirements-sources traceability',
      'Forward traceability',
    ],
    correct: 2,
  },
  {
    id: 130,
    text: 'Which of the following links requirements to specific hardware or software components?',
    options: [
      'Requirements-interface traceability',
      'Requirements-architecture traceability',
      'Requirements-sources traceability',
      'Backward traceability',
    ],
    correct: 2,
  },
  {
    id: 131,
    text: 'What is the primary objective of requirements-interface traceability?',
    options: [
      'To link requirements to project documentation',
      'To track interactions between external systems and requirements',
      'To trace cost estimates',
      'To align requirements with user manuals',
    ],
    correct: 2,
  },
  {
    id: 132,
    text: 'Which type of traceability tracks dependencies between different requirements?',
    options: [
      'Requirements-requirements traceability',
      'Requirements-hardware traceability',
      'Forward-to traceability',
      'User requirement traceability',
    ],
    correct: 1,
  },
  {
    id: 133,
    text: 'How does traceability contribute to impact analysis?',
    options: [
      'By predicting project deadlines',
      'By identifying the effects of changing a requirement',
      'By measuring stakeholder engagement',
      'By reducing code complexity',
    ],
    correct: 2,
  },
  {
    id: 134,
    text: 'What is a key characteristic of good traceability in requirements management?',
    options: [
      'Lack of documentation',
      'Minimal stakeholder involvement',
      'Bidirectional links between requirements and implementation',
      'Limited requirement references',
    ],
    correct: 3,
  },
  {
    id: 135,
    text: 'Which of the following describes bi-directional traceability?',
    options: [
      'Tracing requirements only to design',
      'Linking requirements both to their sources and implementation',
      'Tracing requirements to user manuals',
      'Tracing only backward from requirements',
    ],
    correct: 2,
  },
  {
    id: 136,
    text: 'What happens if traceability is not established in a project?',
    options: [
      'Increased testing coverage',
      'Difficulty in verifying if all requirements are met',
      'Faster project completion',
      'Simplified project documentation',
    ],
    correct: 2,
  },
  {
    id: 137,
    text: 'What is the first step in establishing requirements traceability?',
    options: [
      'Linking requirements to design',
      'Assigning unique identifiers to each requirement',
      'Creating system architecture diagrams',
      'Finalizing project budgets',
    ],
    correct: 2,
  },
  {
    id: 138,
    text: 'How does traceability help during the validation process?',
    options: [
      'By ensuring that each requirement is tested and validated',
      'By improving user satisfaction',
      'By speeding up deployment',
      'By reducing the need for coding standards',
    ],
    correct: 1,
  },
  {
    id: 139,
    text: 'Which factor is crucial for maintaining traceability throughout the software lifecycle?',
    options: [
      'Frequent stakeholder meetings',
      'Proper documentation and tracking tools',
      'Eliminating non-functional requirements',
      'Minimizing code reviews',
    ],
    correct: 2,
  },
  {
    id: 140,
    text: 'Which requirement traceability tool allows linking requirements across the lifecycle?',
    options: [
      'DOORS (Dynamic Object-Oriented Requirements System)',
      'MS Word',
      'System logs',
      'Network diagrams',
    ],
    correct: 1,
  },
  {
    id: 141,
    text: 'What is the primary focus of verification in software engineering?',
    options: [
      'Ensuring the software meets user expectations',
      'Confirming the software is built according to specifications',
      'Testing the software for user experience',
      'Checking the design of the user interface',
    ],
    correct: 2,
  },
  {
    id: 142,
    text: 'Which of the following best defines validation in software development?',
    options: [
      'Checking that the software conforms to design documents',
      'Ensuring the product meets user needs and expectations',
      'Verifying code structure and algorithms',
      'Analyzing project cost estimates',
    ],
    correct: 2,
  },
  {
    id: 143,
    text: 'What is the key difference between verification and validation?',
    options: [
      'Verification focuses on "Are we building the product right?", while validation focuses on "Are we building the right product?"',
      'Verification tests user interfaces, while validation tests code',
      'Validation is done during coding, and verification is done after deployment',
      'There is no difference between verification and validation',
    ],
    correct: 1,
  },
  {
    id: 144,
    text: 'Which of the following techniques is used in verification?',
    options: [
      'User acceptance testing',
      'System integration testing',
      'Code reviews and inspections',
      'Beta testing',
    ],
    correct: 3,
  },
  {
    id: 145,
    text: 'Which type of testing focuses on evaluating the software under real-world conditions?',
    options: [
      'Unit testing',
      'Validation testing',
      'Static testing',
      'Code inspection',
    ],
    correct: 2,
  },
  {
    id: 146,
    text: 'What is the purpose of black-box testing?',
    options: [
      'Testing the internal structure of code',
      'Validating outputs based on given inputs without internal knowledge',
      'Analyzing code complexity',
      'Debugging syntax errors',
    ],
    correct: 2,
  },
  {
    id: 147,
    text: 'Which testing technique is categorized under structural testing?',
    options: [
      'Acceptance testing',
      'System testing',
      'White-box testing',
      'Performance testing',
    ],
    correct: 3,
  },
  {
    id: 148,
    text: 'Which phase of the software development lifecycle does validation typically occur?',
    options: [
      'Design phase',
      'Requirement gathering phase',
      'Deployment phase',
      'After development and testing',
    ],
    correct: 4,
  },
  {
    id: 149,
    text: 'What is a key benefit of formal technical reviews during verification?',
    options: [
      'They help identify design flaws early',
      'They replace the need for system testing',
      'They eliminate the need for debugging',
      'They ensure faster deployment',
    ],
    correct: 1,
  },
  {
    id: 150,
    text: 'Which testing method is best suited for uncovering defects at the code level?',
    options: [
      'Black-box testing',
      'User acceptance testing',
      'White-box testing',
      'Exploratory testing',
    ],
    correct: 3,
  },
  {
    id: 151,
    text: 'Which of the following is an example of validation activity?',
    options: [
      'Code walkthrough',
      'System acceptance testing',
      'Code refactoring',
      'Module integration',
    ],
    correct: 2,
  },
  {
    id: 152,
    text: 'What is the primary goal of system testing?',
    options: [
      'To evaluate individual components',
      'To ensure the system meets functional and non-functional requirements',
      'To debug source code',
      'To validate user documentation',
    ],
    correct: 2,
  },
  {
    id: 153,
    text: 'Which type of testing aims to simulate user actions to check if the software meets requirements?',
    options: [
      'Unit testing',
      'System testing',
      'Acceptance testing',
      'Static testing',
    ],
    correct: 3,
  },
  {
    id: 154,
    text: 'In white-box testing, which aspect of the code is typically examined?',
    options: [
      'User interface design',
      'Internal logic and flow of code',
      'System performance',
      'Stakeholder requirements',
    ],
    correct: 2,
  },
  {
    id: 155,
    text: 'Which type of defect is most likely to be identified during validation?',
    options: [
      'Algorithm errors',
      'Incorrect user requirements',
      'Syntax errors',
      'Code style inconsistencies',
    ],
    correct: 2,
  },
  {
    id: 156,
    text: 'Which testing phase ensures that each software component works as expected in isolation?',
    options: [
      'Unit testing',
      'Integration testing',
      'System testing',
      'Acceptance testing',
    ],
    correct: 1,
  },
  {
    id: 157,
    text: 'What is the purpose of regression testing?',
    options: [
      'To verify new code changes do not introduce new defects',
      'To optimize system performance',
      'To validate initial project requirements',
      'To analyze user feedback',
    ],
    correct: 1,
  },
  {
    id: 158,
    text: 'Which process involves executing test cases without knowledge of the internal code structure?',
    options: [
      'Static analysis',
      'White-box testing',
      'Black-box testing',
      'Unit testing',
    ],
    correct: 3,
  },
  {
    id: 159,
    text: 'Which method helps ensure that software design meets specified requirements?',
    options: [
      'Validation',
      'Verification',
      'Implementation',
      'Refactoring',
    ],
    correct: 2,
  },
  {
    id: 160,
    text: 'Which type of validation technique requires end-user participation?',
    options: [
      'Code walkthrough',
      'Acceptance testing',
      'Static code analysis',
      'Module testing',
    ],
    correct: 2,
  },
  {
    id: 161,
    text: 'What is the primary objective of software requirement specifications (SRS)?',
    options: [
      'To describe how the system will be designed',
      'To outline the services and constraints of the system',
      'To define the project timeline',
      'To estimate project costs',
    ],
    correct: 2,
  },
  {
    id: 162,
    text: 'Which section of the SRS document typically outlines system constraints and limitations?',
    options: [
      'Functional requirements',
      'System architecture',
      'General description',
      'User interface design',
    ],
    correct: 3,
  },
  {
    id: 163,
    text: 'What is one characteristic of a good software requirements specification (SRS)?',
    options: [
      'Ambiguous',
      'Incomplete',
      'Verifiable',
      'Inconsistent',
    ],
    correct: 3,
  },
  {
    id: 164,
    text: 'Which part of an SRS describes the specific functionalities the system must perform?',
    options: [
      'Performance requirements',
      'Functional requirements',
      'System overview',
      'Glossary section',
    ],
    correct: 2,
  },
  {
    id: 165,
    text: 'What does IEEE 830-1998 standard relate to?',
    options: [
      'Software testing procedures',
      'Software maintenance',
      'Software requirement specifications',
      'Software design patterns',
    ],
    correct: 3,
  },
  {
    id: 166,
    text: 'Which of the following is NOT a typical section in an SRS document?',
    options: [
      'General description',
      'System architecture',
      'Risk management plan',
      'Functional requirements',
    ],
    correct: 3,
  },
  {
    id: 167,
    text: 'What is the primary purpose of the "Assumptions and Dependencies" section in an SRS?',
    options: [
      'To define project timelines',
      'To specify constraints that affect system development',
      'To outline the software architecture',
      'To list completed project milestones',
    ],
    correct: 2,
  },
  {
    id: 168,
    text: 'Which of the following is a non-functional requirement?',
    options: [
      'The system must allow users to reset passwords',
      'The system must process 1000 transactions per second',
      'The user can update their profile',
      'The admin can generate reports',
    ],
    correct: 2,
  },
  {
    id: 169,
    text: 'Which of the following best describes "traceability" in the context of SRS?',
    options: [
      'Mapping requirements to design, code, and tests',
      'Tracking employee performance',
      'Linking user manuals to project goals',
      'Outlining future system updates',
    ],
    correct: 1,
  },
  {
    id: 170,
    text: 'What is a functional requirement?',
    options: [
      'A description of how the system should perform under load',
      'A specification of the actions the system must perform',
      'A constraint on the development process',
      'A goal for system security',
    ],
    correct: 2,
  },
  {
    id: 171,
    text: 'Which characteristic ensures that requirements are clearly understood without multiple interpretations?',
    options: [
      'Consistency',
      'Completeness',
      'Unambiguity',
      'Traceability',
    ],
    correct: 3,
  },
  {
    id: 172,
    text: 'What role does the "Use Case" section play in an SRS document?',
    options: [
      'Describes hardware specifications',
      'Illustrates scenarios of system interaction',
      'Lists coding standards',
      'Explains network requirements',
    ],
    correct: 2,
  },
  {
    id: 173,
    text: 'Which aspect of an SRS ensures that no required functionality is omitted?',
    options: [
      'Consistency',
      'Traceability',
      'Completeness',
      'Adaptability',
    ],
    correct: 3,
  },
  {
    id: 174,
    text: 'What is the purpose of including "External Interface Requirements" in an SRS?',
    options: [
      'To define how the system interacts with users, hardware, and software',
      'To list project risks',
      'To manage team responsibilities',
      'To describe cost limitations',
    ],
    correct: 1,
  },
  {
    id: 175,
    text: 'Which attribute ensures that an SRS can be revised without difficulty?',
    options: [
      'Unambiguity',
      'Verifiability',
      'Modifiability',
      'Performance',
    ],
    correct: 3,
  },
  {
    id: 176,
    text: 'What is the significance of performance requirements in an SRS?',
    options: [
      'They define the cost of the project',
      'They specify how well the system must perform under specific conditions',
      'They outline project milestones',
      'They describe system errors',
    ],
    correct: 2,
  },
  {
    id: 177,
    text: 'What is the importance of verifiability in an SRS?',
    options: [
      'Ensures that each requirement can be tested',
      'Allows for open-ended specifications',
      'Focuses on team management',
      'Eliminates the need for testing',
    ],
    correct: 1,
  },
  {
    id: 178,
    text: 'What is a benefit of specifying constraints in an SRS?',
    options: [
      'It simplifies coding procedures',
      'It sets boundaries for design and implementation',
      'It reduces project documentation',
      'It increases hardware costs',
    ],
    correct: 2,
  },
  {
    id: 179,
    text: 'Which of the following is an example of a design constraint in an SRS?',
    options: [
      'The system must be accessible via mobile devices',
      'The system must allow password recovery',
      'The system must support multiple languages',
      'The system must use a specific programming language',
    ],
    correct: 4,
  },
  {
    id: 180,
    text: 'Which part of the SRS describes the overall goals of the system?',
    options: [
      'System overview',
      'Functional requirements',
      'Performance requirements',
      'Glossary section',
    ],
    correct: 1,
  },
];

