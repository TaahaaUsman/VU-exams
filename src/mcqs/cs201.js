export const cs201 = [
  {
    id: 1,
    text: 'What is the primary purpose of programming?',
    options: [
      'To communicate with others',
      'To create artwork',
      'To solve a particular problem by defining a sequence of steps',
      'To use social media effectively',
    ],
    correct: 2,
  },
  {
    id: 2,
    text: 'Who defined programming as "telling the computer what to do"?',
    options: [
      'Alan Turing',
      'Steve Summit',
      'Bill Gates',
      'Matthias Felleisen',
    ],
    correct: 1,
  },
  {
    id: 3,
    text: 'Which of the following is NOT a skill developed through programming?',
    options: [
      'Critical reading',
      'Analytical thinking',
      'Creative synthesis',
      'Physical endurance',
    ],
    correct: 3,
  },
  {
    id: 4,
    text: 'Which of these is a key point to remember while programming?',
    options: [
      'Always assume users know the interface',
      'Comment code liberally',
      'Avoid user-friendly interfaces',
      'Focus solely on hardware',
    ],
    correct: 1,
  },
  {
    id: 5,
    text: 'What does the statement "Computers are stupid" imply in programming?',
    options: [
      'Computers cannot perform basic calculations',
      'Computers require explicit instructions to function correctly',
      'Computers learn from human interaction',
      'Computers have built-in intelligence',
    ],
    correct: 1,
  },
  {
    id: 6,
    text: 'Which of the following is an example of system software?',
    options: [
      'Microsoft Word',
      'Web Browser',
      'Operating System',
      'Spreadsheet Application',
    ],
    correct: 2,
  },
  {
    id: 7,
    text: 'Which language was developed by Dennis Ritchie?',
    options: ['Java', 'C', 'Python', 'Fortran'],
    correct: 1,
  },
  {
    id: 8,
    text: 'What is the function of a compiler?',
    options: [
      'Translates the entire program into machine code',
      'Executes code line by line',
      'Edits program text',
      'Organizes files on the computer',
    ],
    correct: 0,
  },
  {
    id: 9,
    text: 'Which operator is used to find the remainder of a division in C?',
    options: ['%', '/', '*', '-'],
    correct: 0,
  },
  {
    id: 10,
    text: 'Which of the following is an integer data type in C?',
    options: ['char', 'float', 'int', 'double'],
    correct: 2,
  },
  {
    id: 11,
    text: 'How is the main function defined in C?',
    options: ['void main()', 'start()', 'run()', 'main()'],
    correct: 3,
  },
  {
    id: 12,
    text: 'Which symbol is used for comments in C?',
    options: ['//', '/* */', '#', '--'],
    correct: 1,
  },
  {
    id: 13,
    text: 'What is the result of 5 % 2 in C?',
    options: ['2', '0', '5', '1'],
    correct: 3,
  },
  {
    id: 14,
    text: 'Which of these is NOT a valid variable name in C?',
    options: ['_value', 'int', 'data1', 'sum'],
    correct: 1,
  },
  {
    id: 15,
    text: 'Which function is used to display output in C++?',
    options: ['print()', 'write()', 'cout <<', 'show()'],
    correct: 2,
  },
  {
    id: 16,
    text: 'What is the output of 10 + 5 * 2 in C?',
    options: ['30', '20', '15', '20 (with parentheses)'],
    correct: 1,
  },
  {
    id: 17,
    text: 'Which library is used for input-output operations in C?',
    options: ['stdio.h', 'math.h', 'string.h', 'time.h'],
    correct: 0,
  },
  {
    id: 18,
    text: 'How is a float data type declared in C?',
    options: ['float x;', 'int x;', 'char x;', 'long x;'],
    correct: 0,
  },
  {
    id: 19,
    text: 'Which data type is used for single characters in C?',
    options: ['int', 'float', 'char', 'double'],
    correct: 2,
  },
  {
    id: 20,
    text: 'What will be the output of: cout << 5/2; in C++?',
    options: ['2.5', '2', 'Error', '5'],
    correct: 1,
  },
  {
    id: 21,
    text: 'Which loop in C ensures that the code block runs at least once?',
    options: ['for loop', 'while loop', 'do-while loop', 'if statement'],
    correct: 2,
  },
  {
    id: 22,
    text: 'Which of the following is the correct syntax for a for loop?',
    options: [
      'for(initialization; condition; update)',
      'while(initialization; condition; update)',
      'loop(init, cond, upd)',
      'start(condition, increment)',
    ],
    correct: 0,
  },
  {
    id: 23,
    text: 'What does the "break" statement do inside a loop?',
    options: [
      'Repeats the current iteration',
      'Skips the next iteration',
      'Exits the loop immediately',
      'Continues to the next iteration',
    ],
    correct: 2,
  },
  {
    id: 24,
    text: 'Which operator is used to increment the value by 1 in C?',
    options: ['++', '--', '+-', '+='],
    correct: 0,
  },
  {
    id: 25,
    text: 'What will be the output of 3 + 2 * 4 in C?',
    options: ['20', '14', '11', '8'],
    correct: 2,
  },
  {
    id: 26,
    text: 'Which function is used to find the length of a string in C?',
    options: ['strlen()', 'strlength()', 'length()', 'sizeof()'],
    correct: 0,
  },
  {
    id: 27,
    text: 'Which header file is required for file handling in C++?',
    options: ['<iostream>', '<fstream>', '<string>', '<stdlib>'],
    correct: 1,
  },
  {
    id: 28,
    text: 'What does the following line do? rFile.open("data.txt", ios::in);',
    options: [
      'Opens the file for reading',
      'Opens the file for writing',
      'Deletes the file',
      'Copies the file',
    ],
    correct: 0,
  },
  {
    id: 29,
    text: 'Which function moves the file pointer to a specified position?',
    options: ['move()', 'seekg()', 'goto()', 'point()'],
    correct: 1,
  },
  {
    id: 30,
    text: 'What will happen if you try to read beyond the end of a file?',
    options: [
      'Error is thrown',
      'Program terminates',
      'Returns EOF (End of File)',
      'Reads null values',
    ],
    correct: 2,
  },
  {
    id: 31,
    text: 'Which of the following is NOT a valid mode for opening files?',
    options: ['ios::app', 'ios::trunc', 'ios::bin', 'ios::in'],
    correct: 2,
  },
  {
    id: 32,
    text: 'How do you declare a constant array size in C?',
    options: [
      'array size = constant;',
      'const int size = 100;',
      'define size 100;',
      'size = fixed(100);',
    ],
    correct: 1,
  },
  {
    id: 33,
    text: 'Which function is used to close a file in C++?',
    options: ['fclose()', 'stop()', 'end()', 'close()'],
    correct: 3,
  },
  {
    id: 34,
    text: 'Which of the following symbols is used to dereference a pointer?',
    options: ['&', '*', '%', '@'],
    correct: 1,
  },
  {
    id: 35,
    text: 'What will the following program output? int x = 5; cout << ++x;',
    options: ['5', '6', '4', 'Error'],
    correct: 1,
  },
  {
    id: 36,
    text: 'Which of the following keywords is used to handle exceptions in C++?',
    options: ['catch', 'error', 'exception', 'try'],
    correct: 3,
  },
  {
    id: 37,
    text: 'How many times will the loop run? for(int i = 0; i < 5; i++)',
    options: ['6', '4', '5', 'Infinite'],
    correct: 2,
  },
  {
    id: 38,
    text: 'Which of the following will correctly declare an array in C?',
    options: ['array[10];', 'int array[10];', 'int array;', 'array{10};'],
    correct: 1,
  },
  {
    id: 39,
    text: 'Which function is used to compare two strings in C?',
    options: ['strcmp()', 'compare()', 'strcomp()', 'equal()'],
    correct: 0,
  },
  {
    id: 40,
    text: 'Which of the following loops is used when the number of iterations is known?',
    options: ['while loop', 'do-while loop', 'for loop', 'infinite loop'],
    correct: 2,
  },
  {
    id: 41,
    text: 'Which keyword is used to declare an array in C?',
    options: ['array', 'int', 'float', 'data'],
    correct: 1,
  },
  {
    id: 42,
    text: 'What is the index of the first element in a C array?',
    options: ['1', '0', '-1', 'It varies'],
    correct: 1,
  },
  {
    id: 43,
    text: 'Which of the following is the correct way to initialize an array?',
    options: [
      'int arr[5] = {1, 2, 3, 4, 5};',
      'int arr = {1, 2, 3, 4, 5};',
      'array arr[5] = {1, 2, 3, 4, 5};',
      'initialize arr[5] = {1, 2, 3, 4, 5};',
    ],
    correct: 0,
  },
  {
    id: 44,
    text: 'Which function is used to find the maximum value in an array?',
    options: [
      'findMax()',
      'maxArray()',
      'No built-in function in C',
      'getMax()',
    ],
    correct: 2,
  },
  {
    id: 45,
    text: 'What is the result of the expression *ptr if ptr is a pointer to an integer?',
    options: [
      'The address stored in ptr',
      'The value stored at the address ptr points to',
      'The size of the pointer',
      'The memory address of ptr',
    ],
    correct: 1,
  },
  {
    id: 46,
    text: 'Which operator is used to get the address of a variable in C?',
    options: ['*', '&', '%', '$'],
    correct: 1,
  },
  {
    id: 47,
    text: 'How is a pointer declared in C?',
    options: ['pointer int p;', 'int *p;', 'ptr int p;', 'int p*;'],
    correct: 1,
  },
  {
    id: 48,
    text: 'Which of the following describes the relationship between arrays and pointers?',
    options: [
      'Arrays and pointers are unrelated',
      'Array names are constant pointers to the first element',
      'Pointers are incompatible with arrays',
      'Pointers cannot access arrays',
    ],
    correct: 1,
  },
  {
    id: 49,
    text: 'What does the statement int *p = &x; mean in C?',
    options: [
      'Declares x as a pointer to int',
      'Declares p as a pointer to x',
      'Multiplies x by p',
      'Compares x and p',
    ],
    correct: 1,
  },
  {
    id: 50,
    text: 'Which of the following is a valid way to pass an array to a function?',
    options: [
      'By passing the array name',
      'By passing each element separately',
      'By copying the array',
      'By using call by value',
    ],
    correct: 0,
  },
  {
    id: 51,
    text: 'What will happen if you access an array element out of bounds in C?',
    options: [
      'Compiler error',
      'Segmentation fault',
      'Returns -1',
      'Ignores the access',
    ],
    correct: 1,
  },
  {
    id: 52,
    text: 'What will *ptr++ do in C?',
    options: [
      'Increment the value pointed by ptr',
      'Increment the pointer to point to the next element',
      'Increment both ptr and the value it points to',
      'Cause an error',
    ],
    correct: 1,
  },
  {
    id: 53,
    text: 'Which of the following correctly declares a 2D array in C?',
    options: [
      'int arr[5][5];',
      'int arr(5,5);',
      'array arr(5,5);',
      'initialize arr[5][5];',
    ],
    correct: 0,
  },
  {
    id: 54,
    text: 'What is the output of the following code? int a[5] = {1, 2, 3, 4, 5}; cout << a[3];',
    options: ['1', '2', '3', '4'],
    correct: 3,
  },
  {
    id: 55,
    text: 'What is the size of int array[10] in bytes, if int takes 4 bytes in memory?',
    options: ['4', '10', '40', '44'],
    correct: 2,
  },
  {
    id: 56,
    text: 'Which function is used to dynamically allocate memory in C?',
    options: ['alloc()', 'malloc()', 'new()', 'calloc()'],
    correct: 1,
  },
  {
    id: 57,
    text: 'Which operator is used to deallocate memory allocated by malloc() in C?',
    options: ['dealloc()', 'free()', 'delete()', 'clear()'],
    correct: 1,
  },
  {
    id: 58,
    text: 'What is the correct syntax for defining a pointer to a function?',
    options: [
      'int *funcPtr();',
      'int (*funcPtr)();',
      'pointer funcPtr();',
      'int *funcPtr[];',
    ],
    correct: 1,
  },
  {
    id: 59,
    text: 'Which of the following statements about pointers is true?',
    options: [
      'Pointers cannot point to arrays',
      'Pointers can store addresses of other pointers',
      'Pointers are not used in C',
      'Pointers are always null',
    ],
    correct: 1,
  },
  {
    id: 60,
    text: 'Which function is used to copy strings in C?',
    options: ['strcopy()', 'stringcopy()', 'strcpy()', 'strcp()'],
    correct: 2,
  },
  {
    id: 61,
    text: 'Which function is used to open a file in C++?',
    options: ['read()', 'open()', 'file()', 'start()'],
    correct: 1,
  },
  {
    id: 62,
    text: 'Which header file is required for file handling in C++?',
    options: ['<fstream>', '<iostream>', '<string>', '<stdio>'],
    correct: 0,
  },
  {
    id: 63,
    text: 'What does ios::app do when opening a file?',
    options: [
      'Opens the file for reading',
      'Opens the file in append mode',
      'Opens the file for binary access',
      'Closes the file automatically',
    ],
    correct: 1,
  },
  {
    id: 64,
    text: 'Which function is used to write data to a file in C++?',
    options: ['print()', 'write()', 'insert()', 'output()'],
    correct: 1,
  },
  {
    id: 65,
    text: 'Which function is used to move the file pointer to the beginning?',
    options: ['rewind()', 'seekg()', 'move()', 'start()'],
    correct: 1,
  },
  {
    id: 66,
    text: 'Which function is used to close a file in C++?',
    options: ['terminate()', 'stop()', 'fclose()', 'close()'],
    correct: 3,
  },
  {
    id: 67,
    text: 'What does ios::trunc do when opening a file?',
    options: [
      'Truncates the file to zero length',
      'Appends data to the file',
      'Reads data from the file',
      'Deletes the file',
    ],
    correct: 0,
  },
  {
    id: 68,
    text: 'Which of the following modes allows reading and writing to a file?',
    options: ['ios::in', 'ios::out', 'ios::in | ios::out', 'ios::binary'],
    correct: 2,
  },
  {
    id: 69,
    text: 'Which function is used to get the current position of the file pointer?',
    options: ['tellg()', 'locate()', 'pointer()', 'filepos()'],
    correct: 0,
  },
  {
    id: 70,
    text: 'Which of the following is used for binary file handling?',
    options: ['ios::app', 'ios::binary', 'ios::ate', 'ios::end'],
    correct: 1,
  },
  {
    id: 71,
    text: 'What will rFile.seekg(-10, ios::end) do?',
    options: [
      'Move the file pointer 10 bytes before the end',
      'Move the pointer to the beginning',
      'Append 10 bytes to the file',
      'Read the next 10 bytes',
    ],
    correct: 0,
  },
  {
    id: 72,
    text: 'Which function is used to insert data into a file using ofstream?',
    options: ['<<', '>>', '**', '%%'],
    correct: 0,
  },
  {
    id: 73,
    text: 'What is the default mode when opening a file using ifstream?',
    options: ['ios::in', 'ios::out', 'ios::app', 'ios::binary'],
    correct: 0,
  },
  {
    id: 74,
    text: 'Which function checks for the end-of-file condition?',
    options: ['eof()', 'stop()', 'end()', 'read()'],
    correct: 0,
  },
  {
    id: 75,
    text: 'Which of the following is an example of random access in files?',
    options: [
      'Reading a file sequentially',
      'Using seekg() to jump to a specific position',
      'Appending to a file',
      'Closing a file',
    ],
    correct: 1,
  },
  {
    id: 76,
    text: 'Which function is used to write an integer to a file?',
    options: ['put()', 'write()', 'insert()', 'record()'],
    correct: 1,
  },
  {
    id: 77,
    text: 'Which data structure is used to represent a file in memory?',
    options: ['Array', 'Queue', 'Stream', 'Stack'],
    correct: 2,
  },
  {
    id: 78,
    text: 'What happens if you try to write to a file that is opened in ios::in mode?',
    options: [
      'Data is appended',
      'File is truncated',
      'Nothing happens',
      'An error occurs',
    ],
    correct: 3,
  },
  {
    id: 79,
    text: 'Which operator is used to check for file open failure?',
    options: ['!', '!=', '==', '<<'],
    correct: 0,
  },
  {
    id: 80,
    text: 'Which function is used to create a new file if it does not exist?',
    options: ['create()', 'make()', 'open() with ios::out', 'newFile()'],
    correct: 2,
  },
  {
    id: 81,
    text: 'What does the preprocessor directive #define do in C?',
    options: [
      'Defines a function',
      'Defines a macro',
      'Starts a loop',
      'Allocates memory',
    ],
    correct: 1,
  },
  {
    id: 82,
    text: 'Which of the following preprocessor directives is used for conditional compilation?',
    options: ['#if', '#include', '#define', '#undef'],
    correct: 0,
  },
  {
    id: 83,
    text: 'Which directive is used to include header files in a C program?',
    options: ['#define', '#include', '#import', '#header'],
    correct: 1,
  },
  {
    id: 84,
    text: 'What is the primary purpose of #undef in C?',
    options: [
      'Undefines a macro',
      'Defines a loop',
      'Includes a library',
      'Ends a function',
    ],
    correct: 0,
  },
  {
    id: 85,
    text: 'Which of the following symbols indicates a preprocessor directive?',
    options: ['$', '#', '@', '*'],
    correct: 1,
  },
  {
    id: 86,
    text: 'Which function dynamically allocates memory for an array in C?',
    options: ['malloc()', 'calloc()', 'alloc()', 'realloc()'],
    correct: 1,
  },
  {
    id: 87,
    text: 'What is the function of realloc() in dynamic memory allocation?',
    options: [
      'Allocates memory for an array',
      'Reallocates memory to a new size',
      'Frees allocated memory',
      'Checks memory leaks',
    ],
    correct: 1,
  },
  {
    id: 88,
    text: 'Which function is used to free dynamically allocated memory in C?',
    options: ['delete()', 'dealloc()', 'free()', 'dispose()'],
    correct: 2,
  },
  {
    id: 89,
    text: 'What is a memory leak in C programming?',
    options: [
      'Allocating too much memory',
      'Using more variables than declared',
      'Forgetting to free allocated memory',
      'Running out of stack memory',
    ],
    correct: 2,
  },
  {
    id: 90,
    text: 'Which of the following prevents memory leaks in C?',
    options: [
      'Using malloc() frequently',
      'Freeing memory after use',
      'Declaring all variables globally',
      'Avoiding pointers',
    ],
    correct: 1,
  },
  {
    id: 91,
    text: 'What does the term dangling pointer refer to in C?',
    options: [
      'A pointer that points to freed memory',
      'A pointer that is not initialized',
      'A pointer that points to an array',
      'A pointer to a constant',
    ],
    correct: 0,
  },
  {
    id: 92,
    text: 'Which function is used to copy memory blocks in C?',
    options: ['strcpy()', 'memcpy()', 'copy()', 'alloc()'],
    correct: 1,
  },
  {
    id: 93,
    text: 'Which of the following describes a preprocessor?',
    options: [
      'A tool that compiles the code',
      'A tool that optimizes the code',
      'A tool that modifies the code before compilation',
      'A debugger for runtime errors',
    ],
    correct: 2,
  },
  {
    id: 94,
    text: 'What is the output of sizeof(int) on most systems?',
    options: ['2 bytes', '4 bytes', '8 bytes', '16 bytes'],
    correct: 1,
  },
  {
    id: 95,
    text: 'Which keyword is used to define a structure in C?',
    options: ['struct', 'class', 'union', 'typedef'],
    correct: 0,
  },
  {
    id: 96,
    text: 'What does the term "function overloading" refer to in C++?',
    options: [
      'Using multiple return types',
      'Defining multiple functions with the same name but different parameters',
      'Overusing functions',
      'Declaring global functions',
    ],
    correct: 1,
  },
  {
    id: 97,
    text: 'Which of the following is true about inline functions in C++?',
    options: [
      'They are expanded at compile time',
      'They cannot return values',
      'They must be recursive',
      'They are declared outside the class',
    ],
    correct: 0,
  },
  {
    id: 98,
    text: 'Which of the following is an advantage of using inline functions?',
    options: [
      'Reduces function call overhead',
      'Increases runtime speed significantly',
      'Allocates memory dynamically',
      'Automatically frees memory',
    ],
    correct: 0,
  },
  {
    id: 99,
    text: 'Which of the following is a limitation of inline functions?',
    options: [
      'Increases code size',
      'Cannot use parameters',
      'Slower than normal functions',
      'Cannot return values',
    ],
    correct: 0,
  },
  {
    id: 100,
    text: 'Which preprocessor directive is used to define constants?',
    options: ['#define', '#const', '#macro', '#include'],
    correct: 0,
  },
  {
    id: 101,
    text: 'Which of the following best describes a class in C++?',
    options: [
      'A collection of functions',
      'A user-defined data type that combines data and functions',
      'A template for arrays',
      'A function with no return type',
    ],
    correct: 1,
  },
  {
    id: 102,
    text: 'What is an instance of a class called?',
    options: ['Pointer', 'Reference', 'Object', 'Array'],
    correct: 2,
  },
  {
    id: 103,
    text: 'Which keyword is used to define a class in C++?',
    options: ['struct', 'class', 'define', 'function'],
    correct: 1,
  },
  {
    id: 104,
    text: 'What is a constructor in C++?',
    options: [
      'A function that returns an object',
      'A special function called when an object is created',
      'A function that deletes an object',
      'A variable inside a class',
    ],
    correct: 1,
  },
  {
    id: 105,
    text: 'Which of the following is true about default constructors?',
    options: [
      'It must accept parameters',
      'It is automatically created if no constructor is defined',
      'It can only be defined inside the main function',
      'It initializes objects to null',
    ],
    correct: 1,
  },
  {
    id: 106,
    text: 'Which operator is used to allocate memory for objects dynamically?',
    options: ['malloc()', 'alloc()', 'new', 'create'],
    correct: 2,
  },
  {
    id: 107,
    text: 'What does the delete operator do in C++?',
    options: [
      'Deallocates memory',
      'Allocates memory',
      'Creates a class object',
      'Returns a pointer',
    ],
    correct: 0,
  },
  {
    id: 108,
    text: 'Which function is called when an object is destroyed?',
    options: ['Destructor', 'Deallocator', 'Eraser', 'Closer'],
    correct: 0,
  },
  {
    id: 109,
    text: 'Which symbol is used to access members of a class using an object?',
    options: [
      '. (dot operator)',
      '-> (arrow operator)',
      '* (dereference)',
      '& (address of)',
    ],
    correct: 0,
  },
  {
    id: 110,
    text: 'How is a private member of a class accessed?',
    options: [
      'Directly by the object',
      'Only through member functions',
      'Using the sizeof operator',
      'By assigning directly in main()',
    ],
    correct: 1,
  },
  {
    id: 111,
    text: 'Which of the following is true about member functions in a class?',
    options: [
      'They can only modify static variables',
      'They can access and modify private members',
      'They cannot return any value',
      'They must always be public',
    ],
    correct: 1,
  },
  {
    id: 112,
    text: 'What is the function of the friend keyword in C++?',
    options: [
      'It makes a class accessible to all other classes',
      'It allows non-member functions to access private members of a class',
      'It prevents access to a class',
      'It defines a function with no return type',
    ],
    correct: 1,
  },
  {
    id: 113,
    text: 'Which keyword is used to define inheritance in C++?',
    options: ['inherits', 'extends', 'public', 'class'],
    correct: 2,
  },
  {
    id: 114,
    text: 'What is a pure virtual function in C++?',
    options: [
      'A function with no implementation that must be overridden',
      'A function that returns no value',
      'A function used only in templates',
      'A function that always throws an exception',
    ],
    correct: 0,
  },
  {
    id: 115,
    text: 'Which of the following is a feature of polymorphism?',
    options: [
      'Multiple functions with the same name but different parameters',
      'A function that cannot be overridden',
      'Functions without return types',
      'Variables with the same name as functions',
    ],
    correct: 0,
  },
  {
    id: 116,
    text: 'Which of the following correctly defines a destructor in C++?',
    options: [
      'void destructor()',
      '~ClassName()',
      'delete ClassName()',
      'ClassName()',
    ],
    correct: 1,
  },
  {
    id: 117,
    text: 'Which of the following cannot be declared inside a class?',
    options: ['Functions', 'Objects', 'References', 'Headers'],
    correct: 3,
  },
  {
    id: 118,
    text: 'Which access specifier allows a class member to be accessible only within the same class?',
    options: ['public', 'private', 'protected', 'global'],
    correct: 1,
  },
  {
    id: 119,
    text: 'Which keyword is used to prevent a function from being overridden?',
    options: ['final', 'const', 'static', 'virtual'],
    correct: 0,
  },
  {
    id: 120,
    text: 'What is function overloading in C++?',
    options: [
      'Defining multiple functions with the same name but different parameter lists',
      'Using functions with the same name in different classes',
      'Declaring multiple return types for the same function',
      'Using a single function across different files',
    ],
    correct: 0,
  },
  {
    id: 121,
    text: 'What is operator overloading in C++?',
    options: [
      'Modifying the value of an operator',
      'Defining multiple functions with the same name',
      'Giving new meaning to an existing operator for user-defined types',
      'Changing the precedence of operators',
    ],
    correct: 2,
  },
  {
    id: 122,
    text: 'Which operator cannot be overloaded in C++?',
    options: ['+', '::', '-', '++'],
    correct: 1,
  },
  {
    id: 123,
    text: 'Which function is used to allocate memory dynamically in C++?',
    options: ['malloc()', 'calloc()', 'new', 'alloc()'],
    correct: 2,
  },
  {
    id: 124,
    text: 'Which operator is used to deallocate memory in C++?',
    options: ['delete', 'free()', 'remove()', 'dispose()'],
    correct: 0,
  },
  {
    id: 125,
    text: 'What is the return type of operator overloading functions in C++?',
    options: ['void', 'Operator type', 'Class type or reference', 'Pointer'],
    correct: 2,
  },
  {
    id: 126,
    text: 'Which symbol is used to overload the array indexing operator in C++?',
    options: ['[]', '()', '{}', '<>'],
    correct: 0,
  },
  {
    id: 127,
    text: 'Which of the following is true about new operator in C++?',
    options: [
      'It allocates memory but does not call constructor',
      'It allocates memory and calls the constructor',
      'It only calls the constructor',
      'It returns a boolean value',
    ],
    correct: 1,
  },
  {
    id: 128,
    text: 'What is the default access level of class members in C++?',
    options: ['private', 'public', 'protected', 'static'],
    correct: 0,
  },
  {
    id: 129,
    text: 'Which keyword is used to define a destructor in C++?',
    options: ['destroy', 'delete', 'destructor', '~'],
    correct: 3,
  },
  {
    id: 130,
    text: 'Which of the following is not a type of stream in C++?',
    options: ['ifstream', 'ofstream', 'stdio', 'fstream'],
    correct: 2,
  },
  {
    id: 131,
    text: 'What is the role of ios::app mode in file handling?',
    options: [
      'Opens a file for reading',
      'Appends to an existing file',
      'Overwrites the file',
      'Closes the file',
    ],
    correct: 1,
  },
  {
    id: 132,
    text: 'Which function moves the file pointer to the end of the file?',
    options: ['seekg()', 'seekp()', 'eof()', 'close()'],
    correct: 1,
  },
  {
    id: 133,
    text: 'What happens if an object goes out of scope in C++?',
    options: [
      'Destructor is called',
      'Memory leak occurs',
      'Compilation error',
      'Constructor is called again',
    ],
    correct: 0,
  },
  {
    id: 134,
    text: 'Which of the following describes polymorphism in C++?',
    options: [
      'Using different names for the same function',
      'Using the same function name with different implementations',
      'Defining multiple classes in one file',
      'Using only one class in a program',
    ],
    correct: 1,
  },
  {
    id: 135,
    text: 'Which of the following is not a method to handle exceptions in C++?',
    options: ['try-catch', 'throw', 'finally', 'assert'],
    correct: 3,
  },
  {
    id: 136,
    text: 'Which operator is used to read data from a file in C++?',
    options: ['>>', '<<', '==', '**'],
    correct: 0,
  },
  {
    id: 137,
    text: 'Which function is used to format output in C++?',
    options: ['printf()', 'format()', 'cout with manipulators', 'write()'],
    correct: 2,
  },
  {
    id: 138,
    text: 'Which of the following is true for static members in C++?',
    options: [
      'They are associated with an object',
      'They are shared by all objects of the class',
      'They cannot be initialized',
      'They are destroyed with the object',
    ],
    correct: 1,
  },
  {
    id: 139,
    text: 'Which of the following is a valid operator overload declaration?',
    options: [
      'operator+()',
      'int operator+()',
      'operator+(int)',
      'int operator+(const Class&)',
    ],
    correct: 3,
  },
  {
    id: 140,
    text: 'Which of the following is used to catch all exceptions in C++?',
    options: ['catch(*)', 'catch(...)', 'catch(Exception e)', 'catchAll()'],
    correct: 1,
  },
  {
    id: 141,
    text: 'Which header file is required to use manipulators like setw and setprecision in C++?',
    options: ['<iostream>', '<iomanip>', '<fstream>', '<cmath>'],
    correct: 1,
  },
  {
    id: 142,
    text: 'What does the manipulator setw() do in C++?',
    options: [
      'Sets the width of the output field',
      'Sets the precision of floating-point numbers',
      'Sets the position of the file pointer',
      'Sets the format for scientific notation',
    ],
    correct: 0,
  },
  {
    id: 143,
    text: 'Which manipulator is used to force the display of decimal points in floating-point numbers?',
    options: ['setprecision()', 'setfill()', 'fixed', 'showpoint'],
    correct: 3,
  },
  {
    id: 144,
    text: 'Which of the following correctly enables scientific notation in C++?',
    options: [
      'cout << scientific;',
      'cout << setprecision(2);',
      'cout << showpoint;',
      'cout << setw(10);',
    ],
    correct: 0,
  },
  {
    id: 145,
    text: 'Which manipulator is used to fill empty spaces in the output with a character?',
    options: ['setw()', 'setfill()', 'setprecision()', 'setbase()'],
    correct: 1,
  },
  {
    id: 146,
    text: 'Which of the following manipulator sets the base to hexadecimal?',
    options: ['hex', 'oct', 'dec', 'base(16)'],
    correct: 0,
  },
  {
    id: 147,
    text: 'What is the purpose of cin.ignore() in C++?',
    options: [
      'To ignore a specific number of characters from the input buffer',
      'To ignore all inputs',
      'To flush the output buffer',
      'To terminate the program',
    ],
    correct: 0,
  },
  {
    id: 148,
    text: 'Which function is used to check if the end of a file (EOF) is reached?',
    options: ['eof()', 'fail()', 'clear()', 'good()'],
    correct: 0,
  },
  {
    id: 149,
    text: 'Which manipulator resets all formatting flags to default?',
    options: ['reset()', 'flush()', 'clear()', 'noshowpoint'],
    correct: 2,
  },
  {
    id: 150,
    text: 'Which of the following displays output in uppercase for hexadecimal values?',
    options: ['hexuppercase', 'uppercase', 'showhex', 'showpos'],
    correct: 1,
  },
  {
    id: 151,
    text: 'Which manipulator is used to control the alignment of output?',
    options: ['setprecision()', 'setw()', 'left and right', 'fixed'],
    correct: 2,
  },
  {
    id: 152,
    text: 'What will cout.setf(ios::fixed, ios::floatfield) do?',
    options: [
      'Set floating-point numbers to display in fixed-point notation',
      'Enable hexadecimal output',
      'Display output in uppercase',
      'Set the width of the output',
    ],
    correct: 0,
  },
  {
    id: 153,
    text: 'Which function is used to write binary data to a file?',
    options: ['write()', 'print()', 'insert()', 'binary()'],
    correct: 0,
  },
  {
    id: 154,
    text: 'What does ios::ate do when opening a file?',
    options: [
      'Positions the file pointer at the beginning',
      'Positions the file pointer at the end',
      'Appends to the file',
      'Truncates the file',
    ],
    correct: 1,
  },
  {
    id: 155,
    text: 'Which of the following can be used to set the width for all future outputs?',
    options: ['setw()', 'width()', 'ios::width', 'setwidth()'],
    correct: 1,
  },
  {
    id: 156,
    text: 'What is the default precision for floating-point numbers in C++?',
    options: ['4', '5', '6', '8'],
    correct: 2,
  },
  {
    id: 157,
    text: 'Which manipulator is used to switch to octal output?',
    options: ['oct', 'hex', 'bin', 'dec'],
    correct: 0,
  },
  {
    id: 158,
    text: 'Which of the following is NOT a valid file opening mode?',
    options: ['ios::app', 'ios::bin', 'ios::ate', 'ios::trunc'],
    correct: 1,
  },
  {
    id: 159,
    text: 'Which function returns the number of characters extracted by cin?',
    options: ['cin.gcount()', 'cin.length()', 'cin.size()', 'cin.read()'],
    correct: 0,
  },
  {
    id: 160,
    text: 'Which of the following checks if an input operation failed?',
    options: ['cin.fail()', 'cin.bad()', 'cin.ignore()', 'cin.clear()'],
    correct: 0,
  },
  {
    id: 161,
    text: 'Which of the following is a correct syntax for defining a template function in C++?',
    options: [
      'template <typename T>',
      'template (T)',
      'define template <T>',
      'function template<T>',
    ],
    correct: 0,
  },
  {
    id: 162,
    text: 'What is the purpose of templates in C++?',
    options: [
      'To allocate memory dynamically',
      'To create functions and classes that work with any data type',
      'To manage input/output streams',
      'To overload operators',
    ],
    correct: 1,
  },
  {
    id: 163,
    text: 'Which keyword is used to create a template class?',
    options: ['class', 'template', 'function', 'struct'],
    correct: 1,
  },
  {
    id: 164,
    text: 'Which of the following statements is true about class templates?',
    options: [
      'They can only be used for integer types',
      'They allow the creation of generic classes',
      'They cannot use non-type parameters',
      'They do not support static members',
    ],
    correct: 1,
  },
  {
    id: 165,
    text: 'Which of the following allows a template to accept multiple data types?',
    options: [
      'template <typename T1, typename T2>',
      'template <class, class>',
      'template <int, float>',
      'function template<T1, T2>',
    ],
    correct: 0,
  },
  {
    id: 166,
    text: 'Which function overloads the assignment operator in a matrix class?',
    options: [
      'Matrix operator*(Matrix)',
      'Matrix operator=(Matrix)',
      'Matrix operator+(Matrix)',
      'Matrix operator-(Matrix)',
    ],
    correct: 1,
  },
  {
    id: 167,
    text: 'What is the role of the transpose function in the matrix class?',
    options: [
      'To add matrices',
      'To swap two matrices',
      'To flip the matrix over its diagonal',
      'To multiply matrices',
    ],
    correct: 2,
  },
  {
    id: 168,
    text: 'Which operator is overloaded to insert objects into streams in C++?',
    options: ['>>', '<<', '**', '||'],
    correct: 1,
  },
  {
    id: 169,
    text: 'Which of the following correctly declares a friend function in C++?',
    options: [
      'friend function myFunc();',
      'friend void myFunc();',
      'private friend myFunc();',
      'protected friend myFunc();',
    ],
    correct: 1,
  },
  {
    id: 170,
    text: 'What does the overloaded extraction operator (>>) do in the matrix class?',
    options: [
      'Displays the matrix',
      'Reads matrix values from input',
      'Swaps two matrices',
      'Deletes the matrix',
    ],
    correct: 1,
  },
  {
    id: 171,
    text: 'Which of the following functions is called when an object is assigned the value of another object?',
    options: [
      'Destructor',
      'Assignment operator',
      'Constructor',
      'Copy constructor',
    ],
    correct: 1,
  },
  {
    id: 172,
    text: 'Which of the following helps avoid self-assignment in an operator overload?',
    options: [
      'Checking for null pointers',
      'Comparing the object to itself',
      'Using the friend keyword',
      'Calling a destructor manually',
    ],
    correct: 1,
  },
  {
    id: 173,
    text: 'What happens when dynamic memory is not deallocated in C++?',
    options: [
      'Memory leak occurs',
      'Destructor is called automatically',
      'Memory is freed by the compiler',
      'Program exits with an error',
    ],
    correct: 0,
  },
  {
    id: 174,
    text: 'Which of the following best describes garbage collection in C++?',
    options: [
      'Automatic deallocation of memory',
      'Manual deallocation using delete',
      'Compiler optimization',
      'Allocation of arrays dynamically',
    ],
    correct: 1,
  },
  {
    id: 175,
    text: 'Which operator is overloaded to handle matrix multiplication in a matrix class?',
    options: ['+', '-', '*', '/'],
    correct: 2,
  },
  {
    id: 176,
    text: 'Which of the following checks for memory allocation failure in C++?',
    options: [
      'if (ptr == NULL)',
      'if (ptr != nullptr)',
      'if (!malloc)',
      'if (!cin)',
    ],
    correct: 0,
  },
  {
    id: 177,
    text: 'What is the function of the matrix destructor in C++?',
    options: [
      'Allocates memory for the matrix',
      'Performs matrix addition',
      'Deallocates dynamically allocated memory',
      'Initializes matrix elements',
    ],
    correct: 2,
  },
  {
    id: 178,
    text: 'Which function is used to resize dynamically allocated arrays in C++?',
    options: ['malloc()', 'realloc()', 'resize()', 'reallocArray()'],
    correct: 1,
  },
  {
    id: 179,
    text: 'What does the matrix class constructor do?',
    options: [
      'Multiplies matrices',
      'Initializes matrix elements and allocates memory',
      'Destroys the matrix object',
      'Deallocates memory',
    ],
    correct: 1,
  },
  {
    id: 180,
    text: 'Which of the following is not a utility function of the matrix class?',
    options: ['Transpose', 'Destructor', 'Add', 'Multiply'],
    correct: 1,
  },
];
